					Collection Framework.


History of Collection Framework

Collection Framework was introdcued in Java1.2 version,before this we had datatsructures like Vector,Hashing 1.1 version

after 1.2 Vector and Hasing were been added to Collection Framework

1.Collection Framework provides a set of DataStructures in Java.   (Stack,LinkedlIst,double.Queue)....

2. Collection Framework is a part of java.util    (package).

3.Collection provides  a set of classes and Interfaces under java.util   package

4.Collection   Framework helps the Java Programmers to remove a lot of bolier plate code invollved in writing a datastructure like in other 
programming languages.





Why Collection Framework?
1. To Overcome the disadvantages Arrays.

Why Arrays are used?

Use Case:
P.S.1. Develop a Programme /App.... to Store 100 Employees information such as(eid,ename,esal) without using Arrays/Collections.

Solution:
1.
class Employee
	{
	
		int empid=100;  
		String ename="somename";
		float salary=1000.55;
		// According to this i have to create 100 empid,100 ename,100 salary;
	

	}



	1 Variale=MULTIPLE Values (ie datatype is same but different values).

2.  Solution
// By Using Arrays
class Employee  
	{
		[]--->subscript---->to declare an array type
		int empid[]=new int[100];
		String ename[]=new String[100];
		float salary[]=new float[100]
		// According to this i have to create 100 empid,100 ename,100 salary;
	}
		
Problem with Arrays:
1.fixed size: It cannot resize or grown and shrink has per the need		
2.add and remove opertion in middle of an array is complex
3.its sequential.
4.homogenous data. 
5.No Hetrogenous Data

Primitive type of Programming to Object  Oriented Prormaming

1. int []----Integer,Float,Employee,String,
2. Employee []---> achived in c++.
3.   Wanted a Concept where they are able to store Hetrogenous Data
	Basket(anytypeofmaterial);
4. They wanted a kind of concept where the size can grow and shrink at any time without the programmers intervention	

Sun------> Vector------>using Array has the backing datastructure-------->and this gave rise to a concept called Collection


Vector---legacy class

1.2 Collection Framework---->Vector










		
		






What is a Collection?





Different Types of Collection?

java.util.                                   Collection-(I)

	1.Set -I                                                    2.List  -I                          3.Queue -(I)
              	TreeSet (c)                                                         ArrayList(c)
	HashSet (c)		              Vector(c)
	LinkedHashSet(c)		             Stack(c)	
                                                                                      LinkedList(c)
				
Map
TreeMap
HashMap
HashTable
LinkedHashMap

Which Collection when to Use?

Requirement
1.Should not allow duplicate Values
2.Should be able to perform sorting on Number,String,User-DefineObjects
3.Hashing based sorting (in this there is no gurantee of sequence)
4.Sorting from top,bottom,in berween,range based sorting

Solution:
Set




Requirement
1.Should allow duplicate Values
2.Should manage the order in which the objects are stored(means no sorting)
3.Random Access,Insertion or deletion in the middle of the colloection,seearch tehnqiues


Solution:
List


Requirment
FIFO

Solution:
Queue Implemtation of LinkedList

	

Requirment
1.Should be to maintain the data in form of dictionary(ie key and value pair)
2.Should be faster in processing large amount of data.ie (Pure Hashing)
3.Insertion updation deletion,searching should be flexible .


Solution:
Map


How start using the collections.
ex: Using a List tyep

Syntax:

List l=new ArrayList();// valid(means here we are creating a type of ArrayList;


ArrayList al=new ArrayList();// here we are creating the object of ArrayList();

//    



// Ho w to add Objects to any Collection

add(Object);


// About ArrayList
1.Backing DataStructure it uses Arrays and implemnst RandomAccess
2.Resizable(Once it reaches default capacity it automatically by 1)  ie(initailcapcity+1)
3.Frequent Searching or rertival   it is the best
4.Do not use when the frequent operations are inertion,deleteion,or updation
5.Default Capcity of ArrayList 10
6.Default Size of ArrayList "0"
7.Once it reaches default capacity it automaticaly

find the size of the String "Java";
size=no.of characters
Arrayist(1);
Arrayist("abc);
Arrayist("jjj");
Arrayist(" '");



Vector: is a legacy class
1.Backing DataStructure it uses Arrays and implemnst RandomAccess
2.Resizable(Once it reaches default capacity it automatically by 1)  ie(initailcapcity+1)
3.Frequent Searching or rertival   it is the best
4.Default Capcity of Vector is 10
7.Once it reaches default capacity ((initailcapcity+2)

Non-thread-Safe

	
ArrayList

Vector	
10<-------------------------------->
11-

Thread-Safe









   




